version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: tradecaptain_postgres
    environment:
      POSTGRES_DB: tradecaptain
      POSTGRES_USER: tradecaptain_user
      POSTGRES_PASSWORD: tradecaptain_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tradecaptain_network

  # TimescaleDB (PostgreSQL with time-series extension)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: tradecaptain_timescaledb
    environment:
      POSTGRES_DB: timeseries_data
      POSTGRES_USER: timescale_user
      POSTGRES_PASSWORD: timescale_pass
    ports:
      - "5433:5432"
    volumes:
      - timescaledb_data:/var/lib/postgresql/data
      - ./database/timescale_init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - tradecaptain_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: tradecaptain_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - tradecaptain_network

  # Kafka (for real-time data streaming)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: tradecaptain_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - tradecaptain_network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: tradecaptain_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - tradecaptain_network

  # Data Collector Service
  data-collector:
    build:
      context: ./services/data-collector
      dockerfile: Dockerfile
    container_name: tradecaptain_data_collector
    depends_on:
      - postgres
      - redis
      - kafka
    environment:
      - DATABASE_URL=postgres://tradecaptain_user:tradecaptain_pass@postgres:5432/tradecaptain?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    env_file:
      - .env
    networks:
      - tradecaptain_network
    restart: unless-stopped

  # Calculation Engine Service
  calculation-engine:
    build:
      context: ./services/calculation-engine
      dockerfile: Dockerfile
    container_name: tradecaptain_calc_engine
    depends_on:
      - redis
    environment:
      - REDIS_URL=redis://redis:6379
    networks:
      - tradecaptain_network
    restart: unless-stopped

  # API Gateway Service
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    container_name: tradecaptain_api_gateway
    depends_on:
      - postgres
      - redis
      - kafka
      - data-collector
    ports:
      - "8080:8080"
    environment:
      - DATABASE_URL=postgres://tradecaptain_user:tradecaptain_pass@postgres:5432/tradecaptain?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - JWT_SECRET=your-jwt-secret-key
      - PORT=8080
    env_file:
      - .env
    networks:
      - tradecaptain_network
    restart: unless-stopped

  # Frontend (React App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: tradecaptain_frontend
    ports:
      - "3000:3000"
    depends_on:
      - api-gateway
    environment:
      - VITE_API_URL=http://localhost:8080
      - VITE_WS_URL=ws://localhost:8080
    networks:
      - tradecaptain_network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: tradecaptain_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - api-gateway
    networks:
      - tradecaptain_network

  # Monitoring with Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: tradecaptain_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana:/etc/grafana/provisioning
    networks:
      - tradecaptain_network

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: tradecaptain_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - tradecaptain_network

volumes:
  postgres_data:
  timescaledb_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  tradecaptain_network:
    driver: bridge